import { defineNuxtModule, createResolver, addPlugin, addImports, addTemplate } from '@nuxt/kit';

const module = defineNuxtModule({
  meta: {
    name: "dayjs",
    configKey: "dayjs",
    compatibility: {
      nuxt: ">=3"
    }
  },
  // Default configuration options of the Nuxt module
  defaults: {
    locales: [],
    plugins: ["relativeTime", "utc"],
    externalPlugins: [],
    defaultLocale: void 0,
    defaultTimezone: void 0
  },
  setup(options, nuxt) {
    const resolver = createResolver(import.meta.url);
    options.plugins = [...new Set(options.plugins)];
    options.externalPlugins = [...new Set(options.externalPlugins)];
    if (options.defaultTimezone && !options.plugins.includes("timezone"))
      throw new Error("You must include the timezone plugin in order to set a default timezone");
    addPlugin(resolver.resolve("./runtime/plugin"));
    nuxt.options.alias["#dayjs"] = resolver.resolve("./runtime/composables/dayjs");
    addImports({
      name: "useDayjs",
      as: "useDayjs",
      from: nuxt.options.alias["#dayjs"]
    });
    addTemplate({
      filename: "dayjs.imports.mjs",
      getContents: () => generateImports(options),
      write: true
    });
    nuxt.hook("prepare:types", ({ references }) => {
      if (options.plugins) {
        const plugins = options.plugins.map((p) => ({ types: `dayjs/plugin/${p}` }));
        references.push(...plugins);
      }
      if (options.externalPlugins) {
        const externalPlugins = options.externalPlugins.map((p) => ({ types: p.package }));
        references.push(...externalPlugins);
      }
    });
  }
});
const generateImports = ({ locales, plugins, externalPlugins, defaultLocale, defaultTimezone }) => `
// Generated by dayjs-nuxt-module
import dayjs from 'dayjs'
import updateLocale from 'dayjs/plugin/updateLocale'

${locales?.map((locale) => `import 'dayjs/locale/${locale}'`).join("\n")}
${plugins?.map((plugin) => `import ${plugin} from 'dayjs/plugin/${plugin}'`).join("\n")}
${externalPlugins?.map((plugin) => `import ${plugin.name} from '${plugin.package}'`).join("\n")}

dayjs.extend(updateLocale)

${plugins?.map((plugin) => `dayjs.extend(${plugin})`).join("\n")}
${externalPlugins?.map((plugin) => `dayjs.extend(${plugin.name}, ${JSON.stringify(plugin.option)})`).join("\n")}
${defaultTimezone ? `dayjs.tz.setDefault('${defaultTimezone}')` : ""}

// defaultLocale: ${JSON.stringify(defaultLocale)}

${defaultLocale ? `
dayjs.updateLocale(${JSON.stringify(defaultLocale).replace(/^\[|\]$/g, "")})
dayjs.locale('${typeof defaultLocale === "string" ? defaultLocale : defaultLocale[0]}')
` : ""}

export default dayjs
`;

export { module as default };
