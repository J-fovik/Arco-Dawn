import { addComponent, addImportsSources, useNuxt, defineNuxtModule } from '@nuxt/kit';
import * as AllComponents from '@arco-design/web-vue';
import { createUnplugin } from 'unplugin';
import MagicString from 'magic-string';

const libraryName = "@arco-design/web-vue";
const allIcons = ["IconArrowDown", "IconArrowFall", "IconArrowLeft", "IconArrowRight", "IconArrowRise", "IconArrowUp", "IconCaretDown", "IconCaretLeft", "IconCaretRight", "IconCaretUp", "IconDoubleDown", "IconDoubleLeft", "IconDoubleRight", "IconDoubleUp", "IconDownCircle", "IconDown", "IconDragArrow", "IconExpand", "IconLeftCircle", "IconLeft", "IconMenuFold", "IconMenuUnfold", "IconRightCircle", "IconRight", "IconRotateLeft", "IconRotateRight", "IconShrink", "IconSwap", "IconToBottom", "IconToLeft", "IconToRight", "IconToTop", "IconUpCircle", "IconUp", "IconCheckCircleFill", "IconCloseCircleFill", "IconExclamationCircleFill", "IconExclamationPolygonFill", "IconInfoCircleFill", "IconMinusCircleFill", "IconPlusCircleFill", "IconQuestionCircleFill", "IconCheckCircle", "IconCheckSquare", "IconCheck", "IconClockCircle", "IconCloseCircle", "IconClose", "IconExclamationCircle", "IconExclamation", "IconInfoCircle", "IconInfo", "IconMinusCircle", "IconMinus", "IconPlusCircle", "IconPlus", "IconQuestionCircle", "IconQuestion", "IconStop", "IconHeartFill", "IconStarFill", "IconThumbDownFill", "IconThumbUpFill", "IconAt", "IconCloudDownload", "IconCodeBlock", "IconCodeSquare", "IconCode", "IconCustomerService", "IconDownload", "IconExport", "IconEyeInvisible", "IconEye", "IconHeart", "IconHistory", "IconHome", "IconImport", "IconLaunch", "IconList", "IconMessageBanned", "IconMessage", "IconMoreVertical", "IconMore", "IconPoweroff", "IconRefresh", "IconReply", "IconSave", "IconScan", "IconSearch", "IconSelectAll", "IconSend", "IconSettings", "IconShareAlt", "IconShareExternal", "IconShareInternal", "IconStar", "IconSync", "IconThumbDown", "IconThumbUp", "IconTranslate", "IconUpload", "IconVoice", "IconAlignCenter", "IconAlignLeft", "IconAlignRight", "IconAttachment", "IconBgColors", "IconBold", "IconBrush", "IconCopy", "IconDelete", "IconEdit", "IconEraser", "IconFilter", "IconFindReplace", "IconFontColors", "IconFormula", "IconH1", "IconH2", "IconH3", "IconH4", "IconH5", "IconH6", "IconH7", "IconHighlight", "IconItalic", "IconLineHeight", "IconLink", "IconObliqueLine", "IconOrderedList", "IconOriginalSize", "IconPaste", "IconQuote", "IconRedo", "IconScissor", "IconSortAscending", "IconSortDescending", "IconSort", "IconStrikethrough", "IconUnderline", "IconUndo", "IconUnorderedList", "IconZoomIn", "IconZoomOut", "IconMuteFill", "IconPauseCircleFill", "IconPlayArrowFill", "IconPlayCircleFill", "IconSkipNextFill", "IconSkipPreviousFill", "IconSoundFill", "IconBackward", "IconForward", "IconFullscreenExit", "IconFullscreen", "IconLiveBroadcast", "IconMusic", "IconMute", "IconPauseCircle", "IconPause", "IconPlayArrow", "IconPlayCircle", "IconRecordStop", "IconRecord", "IconSkipNext", "IconSkipPrevious", "IconSound", "IconBytedanceColor", "IconLarkColor", "IconTiktokColor", "IconXiguaColor", "IconFaceBookCircleFill", "IconFacebookSquareFill", "IconGoogleCircleFill", "IconQqCircleFill", "IconTwitterCircleFill", "IconWeiboCircleFill", "IconAlipayCircle", "IconCodeSandbox", "IconCodepen", "IconFacebook", "IconGithub", "IconGitlab", "IconGoogle", "IconQqZone", "IconQq", "IconTwitter", "IconWechat", "IconWechatpay", "IconWeibo", "IconChineseFill", "IconEnglishFill", "IconFaceFrownFill", "IconFaceMehFill", "IconFaceSmileFill", "IconMoonFill", "IconPenFill", "IconSunFill", "IconApps", "IconArchive", "IconBarChart", "IconBook", "IconBookmark", "IconBranch", "IconBug", "IconBulb", "IconCalendarClock", "IconCalendar", "IconCamera", "IconCloud", "IconCommand", "IconCommon", "IconCompass", "IconComputer", "IconCopyright", "IconDashboard", "IconDesktop", "IconDice", "IconDragDotVertical", "IconDragDot", "IconDriveFile", "IconEar", "IconEmail", "IconEmpty", "IconExperiment", "IconFileAudio", "IconFileImage", "IconFilePdf", "IconFileVideo", "IconFile", "IconFire", "IconFolderAdd", "IconFolderDelete", "IconFolder", "IconGift", "IconIdcard", "IconImageClose", "IconImage", "IconInteraction", "IconLanguage", "IconLayers", "IconLayout", "IconLoading", "IconLocation", "IconLock", "IconLoop", "IconMan", "IconMenu", "IconMindMapping", "IconMobile", "IconMoon", "IconMosaic", "IconNav", "IconNotificationClose", "IconNotification", "IconPalette", "IconPen", "IconPhone", "IconPrinter", "IconPublic", "IconPushpin", "IconQrcode", "IconRelation", "IconRobotAdd", "IconRobot", "IconSafe", "IconSchedule", "IconShake", "IconSkin", "IconStamp", "IconStorage", "IconSubscribeAdd", "IconSubscribe", "IconSubscribed", "IconSun", "IconTag", "IconTags", "IconThunderbolt", "IconTool", "IconTrophy", "IconUnlock", "IconUserAdd", "IconUserGroup", "IconUser", "IconVideoCamera", "IconWifi", "IconWoman"];
const allLocales = [
  "addI18nMessages",
  "useLocale",
  "getLocale"
];
const allHooks = [
  "useFormItem"
];
const allImportsWithStyle = [
  "Notification",
  "Message",
  "Modal"
];
const allComponents = Object.keys(AllComponents).filter(
  (name) => !allLocales.includes(name) && !allHooks.includes(name) && !["Notification", "Message"].includes(name) && !["install", "default"].includes(name)
);
const allNoStylesComponents = [
  "ConfigProvider",
  "Icon"
];
const allSubComponents = {
  Anchor: ["AnchorLink"],
  Avatar: ["AvatarGroup"],
  Breadcrumb: ["BreadcrumbItem"],
  Button: ["ButtonGroup"],
  Card: ["CardGrid", "CardMeta"],
  Carousel: ["CarouselItem"],
  Cascader: ["CascaderPanel"],
  Checkbox: ["CheckboxGroup"],
  Collapse: ["CollapseItem"],
  DatePicker: ["MonthPicker", "QuarterPicker", "WeekPicker", "YearPicker", "RangePicker"],
  Descriptions: ["DescriptionsItem"],
  Dropdown: ["Dgroup", "Doption", "DropdownButton", "Dsubmenu"],
  Form: ["FormItem"],
  Grid: ["Col", "Row", "GridItem"],
  Image: ["ImagePreviewAction", "ImagePreview", "ImagePreviewGroup"],
  Input: ["InputGroup", "InputPassword", "InputSearch"],
  Layout: ["LayoutContent", "LayoutFooter", "LayoutHeader", "LayoutSider"],
  List: ["ListItem", "ListItemMeta"],
  Menu: ["MenuItem", "MenuItemGroup", "SubMenu"],
  Radio: ["RadioGroup"],
  Select: ["Optgroup", "Option"],
  Skeleton: ["SkeletonLine", "SkeletonShape"],
  Statistic: ["Countdown"],
  Steps: ["Step"],
  Table: ["Thead", "Td", "Th", "Tr", "Tbody", "TableColumn"],
  Tabs: ["TabPane"],
  Timeline: ["TimelineItem"],
  Typography: ["TypographyParagraph", "TypographyText", "TypographyTitle"]
};
const defaultInclude = [
  /\.vue$/,
  /\.vue\?vue/,
  /\.vue\?v=/,
  /\.((c|m)?j|t)sx?$/
];
const defaultExclude = [
  /[\\/]node_modules[\\/]/,
  /[\\/]\.git[\\/]/,
  /[\\/]\.nuxt[\\/]/
];
const defaults = {
  components: allComponents,
  componentPrefix: "A",
  icons: allIcons,
  iconPrefix: "",
  subComponents: allSubComponents,
  imports: allImportsWithStyle,
  importPrefix: "",
  locales: false,
  localePrefix: "",
  hooks: allHooks,
  hookPrefix: "",
  importStyle: "css",
  theme: void 0,
  noStylesComponents: allNoStylesComponents,
  include: defaultInclude,
  exclude: defaultExclude,
  importFrom: "es"
};

function toRegExp(arr, flags) {
  return new RegExp(`\\b(${arr.join("|")})\\b`, flags);
}
function getSubComponents(subComponents) {
  return Object.fromEntries(
    Object.entries(subComponents).reduce((all, [key, values]) => {
      values.forEach((item) => {
        all.push([item, key]);
      });
      return all;
    }, [])
  );
}
function computeOptions(options) {
  return {
    ...options,
    subComponentsMap: getSubComponents(options.subComponents)
  };
}
function genSideEffectsImport(value) {
  return `import '${value}';`;
}
function camelize(value) {
  return value.replace(/(^|-)(\w)/g, (a, b, c) => c.toUpperCase());
}
function hyphenate(value) {
  return value.replace(/\B([A-Z])/g, "-$1").toLowerCase();
}
function insertPrefix(value, prefix) {
  return value.replace(/^(\w+?)(\B)([A-Z])/, (m, a, b, c) => `${a}${prefix}${c}`);
}

function resolveComponents(config) {
  const { components, subComponentsMap, icons } = config;
  if (!components)
    return;
  const allComponents = new Set(components);
  allComponents.forEach((name) => {
    const componentName = subComponentsMap[name] || name;
    const dir = hyphenate(componentName);
    const filePath = `${libraryName}/${config.importFrom}/${dir}/index`;
    addComponent({
      export: name === componentName ? "default" : name,
      name: `${config.componentPrefix}${name}`,
      filePath
    });
  });
  if (!icons)
    return;
  icons.forEach((icon) => {
    addComponent({
      export: icon,
      name: `${config.iconPrefix}${icon}`,
      filePath: `${libraryName}/${config.importFrom}/icon`
    });
  });
}

function resolveImports(config) {
  const { imports, locales, hooks } = config;
  const allImports = imports || [];
  const allLocales = locales || [];
  const allHooks = hooks || [];
  addImportsSources({
    from: `${libraryName}/${config.importFrom}`,
    imports: [
      ...allImports.map((i) => [i, config.importPrefix + i]),
      ...allLocales.map((i) => [i, insertPrefix(i, config.localePrefix)]),
      ...allHooks.map((i) => [i, insertPrefix(i, config.hookPrefix)])
    ]
  });
}

function getStyleDir(config, name) {
  if (config.importStyle === false)
    return void 0;
  const dir = hyphenate(config.subComponentsMap[name] || name);
  const type = config.importStyle;
  if (config.theme) {
    if (type === "less")
      return `${config.theme}/theme.less`;
    if (type === "css" || type)
      return `${config.theme}/css/arco.css`;
  }
  if (type === "less")
    return `${libraryName}/${config.importFrom}/${dir}/style/index.js`;
  if (type === "css" || type)
    return `${libraryName}/${config.importFrom}/${dir}/style/css.js`;
}
function resolveStyles(config, name) {
  const { components, noStylesComponents, imports } = config;
  if ((imports || []).includes(name) && (allImportsWithStyle || []).includes(name))
    return getStyleDir(config, name);
  const nameReg = new RegExp(`^${config.componentPrefix}[A-Z]`);
  if (!nameReg.test(name))
    return void 0;
  const componentName = name.slice(config.componentPrefix.length);
  if (!(components || []).includes(componentName) || noStylesComponents.includes(name))
    return void 0;
  return getStyleDir(config, componentName);
}

const componentsRegExp = /(?<=[ (])_?resolveComponent\(\s*["'](lazy-|Lazy)?([^'"]*?)["'][\s,]*[^)]*\)/g;
const importsRegExp = toRegExp(allImportsWithStyle || [], "g");
const transformPlugin = createUnplugin((options) => {
  const { include, exclude, transformStyles } = options;
  return {
    name: `${libraryName}:transform`,
    enforce: "post",
    transformInclude(id) {
      if (exclude.some((pattern) => id.match(pattern)))
        return false;
      if (include.some((pattern) => id.match(pattern)))
        return true;
    },
    transform(code, id) {
      const imports = /* @__PURE__ */ new Set();
      const s = new MagicString(code);
      const addStyles = (styles) => {
        styles && imports.add(genSideEffectsImport(styles));
      };
      s.replace(componentsRegExp, (full, lazy, name) => {
        addStyles(transformStyles(camelize(name)));
        return full;
      });
      s.replace(importsRegExp, (full, name) => {
        addStyles(transformStyles(camelize(name)));
        return full;
      });
      if (imports.size)
        s.prepend([...imports, ""].join("\n"));
      if (s.hasChanged()) {
        return {
          code: s.toString(),
          map: options.sourcemap ? s.generateMap({ source: id, includeContent: true }) : void 0
        };
      }
    }
  };
});

function resolveOptions() {
  const nuxt = useNuxt();
  nuxt.options.build.transpile.push(libraryName);
}

const module = defineNuxtModule({
  meta: {
    name: "Arco Design Nuxt Module",
    configKey: "arco"
  },
  defaults,
  setup(_options, nuxt) {
    const options = computeOptions(_options);
    resolveOptions();
    nuxt.options.imports.autoImport !== false && resolveImports(options);
    nuxt.options.components !== false && resolveComponents(options);
    nuxt.hook("vite:extendConfig", (config, { isClient }) => {
      const mode = isClient ? "client" : "server";
      config.plugins = config.plugins || [];
      config.plugins.push(transformPlugin.vite({
        include: options.include,
        exclude: options.exclude,
        sourcemap: !!nuxt.options.sourcemap[mode],
        transformStyles: (name) => resolveStyles(options, name)
      }));
    });
    nuxt.hook("webpack:config", (configs) => {
      configs.forEach((config) => {
        const mode = config.name === "client" ? "client" : "server";
        config.plugins = config.plugins || [];
        config.plugins.push(transformPlugin.webpack({
          include: options.include,
          exclude: options.exclude,
          sourcemap: !!nuxt.options.sourcemap[mode],
          transformStyles: (name) => resolveStyles(options, name)
        }));
      });
    });
  }
});

export { module as default };
