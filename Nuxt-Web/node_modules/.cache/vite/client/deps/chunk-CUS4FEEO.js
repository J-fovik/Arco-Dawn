import {
  ResizeObserver_es_default
} from "./chunk-5E5GYHDA.js";
import {
  getFirstElementFromChildren
} from "./chunk-HVIY2XKT.js";
import {
  defineComponent,
  onBeforeUnmount,
  onMounted,
  onUpdated,
  ref,
  watch
} from "./chunk-RAKT47ZN.js";

// node_modules/@arco-design/web-vue/es/_hooks/use-first-element.js
var useFirstElement = () => {
  const children = {};
  const firstElement = ref();
  const getFirstElement = () => {
    const element = getFirstElementFromChildren(children.value);
    if (element !== firstElement.value) {
      firstElement.value = element;
    }
  };
  onMounted(() => getFirstElement());
  onUpdated(() => getFirstElement());
  return {
    children,
    firstElement
  };
};

// node_modules/@arco-design/web-vue/es/_components/resize-observer-v2.js
var ResizeObserver = defineComponent({
  name: "ResizeObserver",
  props: {
    watchOnUpdated: Boolean
  },
  emits: [
    "resize"
  ],
  setup(props, { emit, slots }) {
    const { children, firstElement } = useFirstElement();
    let resizeObserver;
    const createResizeObserver = (target) => {
      if (!target)
        return;
      resizeObserver = new ResizeObserver_es_default((entries) => {
        const entry = entries[0];
        emit("resize", entry);
      });
      resizeObserver.observe(target);
    };
    const destroyResizeObserver = () => {
      if (resizeObserver) {
        resizeObserver.disconnect();
        resizeObserver = null;
      }
    };
    watch(firstElement, (element) => {
      if (resizeObserver)
        destroyResizeObserver();
      if (element) {
        createResizeObserver(element);
      }
    });
    onBeforeUnmount(() => {
      if (resizeObserver)
        destroyResizeObserver();
    });
    return () => {
      var _a;
      children.value = (_a = slots.default) == null ? void 0 : _a.call(slots);
      return children.value;
    };
  }
});

export {
  useFirstElement,
  ResizeObserver
};
//# sourceMappingURL=chunk-CUS4FEEO.js.map
