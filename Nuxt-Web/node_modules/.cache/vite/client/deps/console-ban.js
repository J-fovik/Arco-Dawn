import "./chunk-UXIASGQL.js";

// node_modules/console-ban/dist/console-ban.esm.js
var __assign = function() {
  __assign = Object.assign || function __assign2(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var defaultOptions = {
  clear: true,
  debug: true,
  debugTime: 3e3,
  bfcache: true
};
var EBrowser = {
  Chrome: 0,
  Firefox: 1,
  Safari: 2
};
var completion = function completion2(url) {
  if (!url) {
    return "/";
  }
  return url[0] !== "/" ? "/".concat(url) : url;
};
var isUserAgentContains = function isUserAgentContains2(text) {
  return ~navigator.userAgent.toLowerCase().indexOf(text);
};
var isString = function isString2(v) {
  return typeof v === "string";
};
var locationChange = function locationChange2(target, env) {
  if (env === EBrowser.Safari) {
    location.replace(target);
    return;
  }
  location.href = target;
};
var counts = 0;
var triggered = 0;
var getChromeRerenderTestFunc = function getChromeRerenderTestFunc2(fire) {
  var mark = 0;
  var seq = 1 << counts++;
  return function() {
    if (triggered && !(triggered & seq)) {
      return;
    }
    mark++;
    if (mark === 2) {
      triggered |= seq;
      fire();
      mark = 1;
    }
  };
};
var errorDetector = function errorDetector2(trigger) {
  var e = new Error();
  Object.defineProperty(e, "message", {
    get: function get() {
      trigger();
    }
  });
  console.log(e);
};
var getChromeTest = function getChromeTest2(fire) {
  var re = /./;
  re.toString = getChromeRerenderTestFunc(fire);
  var func = function func2() {
    return re;
  };
  func.toString = getChromeRerenderTestFunc(fire);
  var date = /* @__PURE__ */ new Date();
  date.toString = getChromeRerenderTestFunc(fire);
  console.log("%c", func, func(), date);
  var errorFire = getChromeRerenderTestFunc(fire);
  errorDetector(errorFire);
};
var getFirefoxTest = function getFirefoxTest2(fire) {
  var re = /./;
  re.toString = fire;
  console.log(re);
};
var getSafariTest = function getSafariTest2(fire) {
  var img = new Image();
  Object.defineProperty(img, "id", {
    get: function get() {
      fire(EBrowser.Safari);
    }
  });
  console.log(img);
};
var ConsoleBan = function() {
  function ConsoleBan2(option) {
    var _a = __assign(__assign({}, defaultOptions), option), clear = _a.clear, debug = _a.debug, debugTime = _a.debugTime, callback = _a.callback, redirect = _a.redirect, write = _a.write, bfcache = _a.bfcache;
    this._debug = debug;
    this._debugTime = debugTime;
    this._clear = clear;
    this._bfcache = bfcache;
    this._callback = callback;
    this._redirect = redirect;
    this._write = write;
  }
  ConsoleBan2.prototype.clear = function() {
    if (this._clear) {
      console.clear = function() {
      };
    }
  };
  ConsoleBan2.prototype.bfcache = function() {
    if (this._bfcache) {
      window.addEventListener("unload", function() {
      });
      window.addEventListener("beforeunload", function() {
      });
    }
  };
  ConsoleBan2.prototype.debug = function() {
    if (this._debug) {
      var db = new Function("debugger");
      setInterval(db, this._debugTime);
    }
  };
  ConsoleBan2.prototype.redirect = function(env) {
    var target = this._redirect;
    if (!target) {
      return;
    }
    if (target.indexOf("http") === 0) {
      location.href !== target && locationChange(target, env);
      return;
    }
    var path = location.pathname + location.search;
    if (completion(target) === path) {
      return;
    }
    locationChange(target, env);
  };
  ConsoleBan2.prototype.callback = function() {
    if (!this._callback && !this._redirect && !this._write) {
      return;
    }
    if (!window) {
      return;
    }
    var fireCallback = this.fire.bind(this);
    var isChrome = window.chrome || isUserAgentContains("chrome");
    var isFirefox = isUserAgentContains("firefox");
    if (isChrome) {
      getChromeTest(fireCallback);
      return;
    }
    if (isFirefox) {
      getFirefoxTest(fireCallback);
      return;
    }
    getSafariTest(fireCallback);
  };
  ConsoleBan2.prototype.write = function() {
    var content = this._write;
    if (content) {
      document.body.innerHTML = isString(content) ? content : content.innerHTML;
    }
  };
  ConsoleBan2.prototype.fire = function(env) {
    if (this._callback) {
      this._callback.call(null);
      return;
    }
    this.redirect(env);
    if (this._redirect) {
      return;
    }
    this.write();
  };
  ConsoleBan2.prototype.prepare = function() {
    this.clear();
    this.bfcache();
    this.debug();
  };
  ConsoleBan2.prototype.ban = function() {
    this.prepare();
    this.callback();
  };
  return ConsoleBan2;
}();
var init = function init2(option) {
  var instance = new ConsoleBan(option);
  instance.ban();
};
export {
  init
};
//# sourceMappingURL=console-ban.js.map
