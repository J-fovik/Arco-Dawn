{"version":3,"file":"index-a008b2db.js","sources":["../../../../utils/index.ts"],"sourcesContent":["import dayjs from 'dayjs';\n\n// 等待指定时间\nexport const sleep = (millisecond: number): Promise<any> =>\n\tnew Promise((resolve) => setTimeout(resolve, millisecond));\n// 文本格式化\nexport const textFormat = (value: any, empty = '-') => (value ? value : empty);\n// 文本格式化\nexport const textCompany = (value: any, company: string, empty = '-') => {\n\treturn value == '0' ? empty : value ? value + company : empty;\n};\n// 日期格式转换\nexport const formatDate = (value: string | Date | number, format = 'YYYYMMDD', empty = '') => {\n\tif (value) {\n\t\treturn dayjs(value).format(format);\n\t}\n\treturn empty;\n};\n// 时间转换\nexport const turnDateTime = (value: string, empty = '-') => {\n\tif (value) {\n\t\tif (value.length <= 4) {\n\t\t\treturn `${value.substring(0, 2)}:${value.substring(2, 4)}`;\n\t\t}\n\t\tif (value.length <= 8) {\n\t\t\treturn `${value.substring(0, 4)}-${value.substring(4, 6)}-${value.substring(6, 8)}`;\n\t\t}\n\t\treturn `${value.substring(0, 4)}-${value.substring(4, 6)}-${value.substring(\n\t\t\t6,\n\t\t\t8\n\t\t)} ${value.substring(8, 10)}:${value.substring(10, 12)}:${value.substring(12, 14)}`;\n\t}\n\treturn empty;\n};\n// 解决浮点数bug\nexport const roundNum = (num: number, decimalPlaces: number = 2) => {\n\tconst factor = 10 ** decimalPlaces;\n\treturn Math.round(num * factor) / factor;\n};\n// download二进制文件\nexport const downloadBlob = (res: any, name?: string) => {\n\tconst blob = new Blob([res], {\n\t\ttype: 'text/plain;charset=utf-8',\n\t});\n\t// // 判断下载内容是不是空的\n\t// if (blob.size === 0) {\n\t// \treturn false;\n\t// }\n\tconst downloadElement = document.createElement('a'); //创建一个a 虚拟标签\n\tconst href = window.URL.createObjectURL(blob); // 创建下载的链接\n\tdownloadElement.href = href;\n\tdownloadElement.download = decodeURI(name?.replace(/%/g, '%25') ?? ''); // 下载后文件名\n\tdocument.body.appendChild(downloadElement);\n\tdownloadElement.click(); // 点击下载\n\tdocument.body.removeChild(downloadElement); // 下载完成移除元素\n\twindow.URL.revokeObjectURL(href);\n};\n// 数字千分位\nexport const turnThousandth = (value: any, empty = '-') => {\n\tif (![undefined, null].includes(value)) {\n\t\tconst values = `${value}`.split('.');\n\t\tvalues[0] = values[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n\t\treturn values.join('.');\n\t}\n\treturn empty;\n};\n// 数字转换ToFixed2\nexport const turnNumberToFixed2 = (num: string | number | undefined, empty = '-') => {\n\tif (!num) return empty;\n\treturn parseFloat(num as string).toFixed(2);\n};\n// 数组内对象value转number\nexport const turnArrayKeys = (list: Array<any>, numberKeys: Array<string> = []) => {\n\treturn list.map((item) => {\n\t\t// 指定key转数字\n\t\tif (numberKeys.length) {\n\t\t\tnumberKeys.forEach((key) => {\n\t\t\t\tif (item[key] !== undefined) {\n\t\t\t\t\titem[key] = item[key] * 1;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn item;\n\t});\n};\n// 获取默认年份\nexport const getGkYear = () => {\n\t// 获取当前日期\n\tconst now = dayjs();\n\t// 以9月1日位 分界日期\n\tconst boundaryDate = dayjs().month(8).date(1);\n\t// 比较当前日期是否大于分界日期\n\tif (now.isAfter(boundaryDate)) {\n\t\t// 当前日期大于分界日期，展示明年\n\t\treturn now.add(1, 'year').year().toString();\n\t} else {\n\t\t// 当前日期小于等于分界日期，展示今年\n\t\treturn now.year().toString();\n\t}\n};\n/**\n * 手机号脱敏格式化\n * @param {string} phone 手机号码\n * @returns {string} 处理后的手机号码(155****8810)\n */\nexport function hidePhoneFormat(phone: string) {\n\treturn phone && phone.replace(/^(\\d{3})\\d{4}(\\d{4})$/, '$1****$2');\n}\n/**\n * 根据key重组数组\n * @param {Array} array 要处理的数组\n * @param {string} groupByKey  用于分组的键 （yxmc）\n * @param {string} childName  要存储的数组key的名称 （children）\n * @param {string} mergeChildKey  要存储在子数组的键 （zySeq）\n * @returns {Array} 重组后的数组\n * @example\n * groupByAndMergeChildArrays([{yxmc: 'A', zySeq: 1 },{yxmc: 'B', zySeq: 2 },{ yxmc: 'A', zySeq: 3 }]) // [{yxmc: 'A', children:[1, 3]},{yxmc: 'B', children: [2] }]\n */\nexport const groupByAndMergeChildArrays = (\n\tarray: Array<any>,\n\tgroupByKey: any,\n\tchildName: any,\n\tmergeChildKey: any\n) => {\n\treturn array.reduce((acc, cur) => {\n\t\t// 检查 acc 数组中是否已经存在相同 groupByKey 的项\n\t\tconst existingItem: any = acc.find((item: any) => item[groupByKey] === cur[groupByKey]);\n\t\tif (existingItem) {\n\t\t\t// 如果存在，将 cur[mergeChildKey] 添加到 existingItem.child 数组中\n\t\t\texistingItem[childName].push(cur[mergeChildKey]);\n\t\t} else {\n\t\t\t// 如果不存在，创建一个新的项并加入 acc 数组\n\t\t\tacc.push({\n\t\t\t\t...cur,\n\t\t\t\t[childName]: [cur[mergeChildKey]],\n\t\t\t});\n\t\t}\n\t\treturn acc;\n\t}, []);\n};\n"],"names":["dayjs"],"mappings":";AAGa,MAAA,QAAQ,CAAC,gBACrB,IAAI,QAAQ,CAAC,YAAY,WAAW,SAAS,WAAW,CAAC;AAEnD,MAAM,aAAa,CAAC,OAAY,QAAQ,QAAS,QAAQ,QAAQ;AAEjE,MAAM,cAAc,CAAC,OAAY,SAAiB,QAAQ,QAAQ;AACxE,SAAO,SAAS,MAAM,QAAQ,QAAQ,QAAQ,UAAU;AACzD;AAEO,MAAM,aAAa,CAAC,OAA+B,SAAS,YAAY,QAAQ,OAAO;AAC7F,MAAI,OAAO;AACV,WAAOA,YAAM,KAAK,EAAE,OAAO,MAAM;AAAA,EAClC;AACO,SAAA;AACR;AAuBa,MAAA,eAAe,CAAC,KAAU,SAAkB;AACxD,QAAM,OAAO,IAAI,KAAK,CAAC,GAAG,GAAG;AAAA,IAC5B,MAAM;AAAA,EAAA,CACN;AAKK,QAAA,kBAAkB,SAAS,cAAc,GAAG;AAClD,QAAM,OAAO,OAAO,IAAI,gBAAgB,IAAI;AAC5C,kBAAgB,OAAO;AACvB,kBAAgB,WAAW,WAAU,6BAAM,QAAQ,MAAM,WAAU,EAAE;AAC5D,WAAA,KAAK,YAAY,eAAe;AACzC,kBAAgB,MAAM;AACb,WAAA,KAAK,YAAY,eAAe;AAClC,SAAA,IAAI,gBAAgB,IAAI;AAChC;AAEO,MAAM,iBAAiB,CAAC,OAAY,QAAQ,QAAQ;AAC1D,MAAI,CAAC,CAAC,QAAW,IAAI,EAAE,SAAS,KAAK,GAAG;AACvC,UAAM,SAAS,GAAG,KAAK,GAAG,MAAM,GAAG;AACnC,WAAO,CAAC,IAAI,OAAO,CAAC,EAAE,QAAQ,yBAAyB,GAAG;AACnD,WAAA,OAAO,KAAK,GAAG;AAAA,EACvB;AACO,SAAA;AACR;AAwCO,SAAS,gBAAgB,OAAe;AAC9C,SAAO,SAAS,MAAM,QAAQ,yBAAyB,UAAU;AAClE;AAWO,MAAM,6BAA6B,CACzC,OACA,YACA,WACA,kBACI;AACJ,SAAO,MAAM,OAAO,CAAC,KAAK,QAAQ;AAE3B,UAAA,eAAoB,IAAI,KAAK,CAAC,SAAc,KAAK,UAAU,MAAM,IAAI,UAAU,CAAC;AACtF,QAAI,cAAc;AAEjB,mBAAa,SAAS,EAAE,KAAK,IAAI,aAAa,CAAC;AAAA,IAAA,OACzC;AAEN,UAAI,KAAK;AAAA,QACR,GAAG;AAAA,QACH,CAAC,SAAS,GAAG,CAAC,IAAI,aAAa,CAAC;AAAA,MAAA,CAChC;AAAA,IACF;AACO,WAAA;AAAA,EACR,GAAG,CAAE,CAAA;AACN;"}